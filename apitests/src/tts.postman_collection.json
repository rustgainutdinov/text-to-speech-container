{
	"info": {
		"_postman_id": "ee0995f4-7913-4ec6-840a-af1889a9381a",
		"name": "Text to speech",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Balance service",
			"item": [
				{
					"name": "shouldCreateBalance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"async function run() {",
									"\tawait new Promise(done => setTimeout(() => done(), 5000));",
									"}",
									"run();",
									"function uuidv4() {",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
									"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
									"    return v.toString(16);",
									"    });",
									"}",
									"pm.environment.set(\"currentBalanceUserID\", uuidv4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userID\": \"{{currentBalanceUserID}}\",\n    \"score\": 1000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{balanceserviceHost}}{{balanceServicePort}}/api/v1/balance/create",
							"host": [
								"{{balanceserviceHost}}{{balanceServicePort}}"
							],
							"path": [
								"api",
								"v1",
								"balance",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "shouldTopUpBalance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest(pm.environment.get(\"balanceserviceHost\") + pm.environment.get(\"balanceServicePort\") + \"/api/v1/balance/canWriteOff?score=1000&userID=\" + pm.environment.get(\"currentBalanceUserID\"), function (err, response) {",
									"    let res = response.json();",
									"    pm.test('It should be possible to write off 1000 score', function () {",
									"        pm.expect(response.status).to.eql(\"OK\");",
									"        pm.expect(res.result).to.eql(true);",
									"    });",
									"});",
									"pm.sendRequest(pm.environment.get(\"balanceserviceHost\") + pm.environment.get(\"balanceServicePort\") + \"/api/v1/balance/canWriteOff?score=1001&userID=\" + pm.environment.get(\"currentBalanceUserID\"), function (err, response) {",
									"    let res = response.json();",
									"    pm.test('It should be impossible to write off 1001    score', function () {",
									"        pm.expect(response.status).to.eql(\"OK\");",
									"        pm.expect(res.result).to.eql(false);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userID\": \"{{currentBalanceUserID}}\",\n    \"score\": 1000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{balanceserviceHost}}{{balanceServicePort}}/api/v1/balance/topUp",
							"host": [
								"{{balanceserviceHost}}{{balanceServicePort}}"
							],
							"path": [
								"api",
								"v1",
								"balance",
								"topUp"
							]
						}
					},
					"response": []
				},
				{
					"name": "writeOffFromBalance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest(pm.environment.get(\"balanceserviceHost\") + pm.environment.get(\"balanceServicePort\") + \"/api/v1/balance/canWriteOff?score=929&userID=\" + pm.environment.get(\"currentBalanceUserID\"), function (err, response) {",
									"    let res = response.json();",
									"    pm.test('It should be possible to write off 929 score', function () {",
									"        pm.expect(response.status).to.eql(\"OK\");",
									"        pm.expect(res.result).to.eql(true);",
									"    });",
									"});",
									"pm.sendRequest(pm.environment.get(\"balanceserviceHost\") + pm.environment.get(\"balanceServicePort\") + \"/api/v1/balance/canWriteOff?score=930&userID=\" + pm.environment.get(\"currentBalanceUserID\"), function (err, response) {",
									"    let res = response.json();",
									"    pm.test('It should be impossible to write off 930 score', function () {",
									"        pm.expect(response.status).to.eql(\"OK\");",
									"        pm.expect(res.result).to.eql(false);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userID\": \"{{currentBalanceUserID}}\",\n    \"score\": 71\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{balanceserviceHost}}{{balanceServicePort}}/api/v1/balance/writeOff",
							"host": [
								"{{balanceserviceHost}}{{balanceServicePort}}"
							],
							"path": [
								"api",
								"v1",
								"balance",
								"writeOff"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeBalance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"userID\": \"{{currentBalanceUserID}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{balanceserviceHost}}{{balanceServicePort}}/api/v1/balance/remove",
							"host": [
								"{{balanceserviceHost}}{{balanceServicePort}}"
							],
							"path": [
								"api",
								"v1",
								"balance",
								"remove"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Translation service",
			"item": [
				{
					"name": "Translate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function uuidv4() {",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
									"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
									"    return v.toString(16);",
									"    });",
									"}",
									"pm.environment.set(\"currentBalanceUserID\", uuidv4());",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"balanceserviceHost\") + pm.environment.get(\"balanceServicePort\") +'/api/v1/balance/create',",
									"    method: 'POST',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ userID: pm.environment.get(\"currentBalanceUserID\") })",
									"    }",
									"}, function (err, res) {",
									"    pm.sendRequest({",
									"        url: pm.environment.get(\"balanceserviceHost\") + pm.environment.get(\"balanceServicePort\") +'/api/v1/balance/topUp',",
									"        method: 'POST',",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ userID: pm.environment.get(\"currentBalanceUserID\"), score: 100 })",
									"        }",
									"    }, function (err, res) {",
									"        if (err != null) {",
									"            console.log(err)",
									"        }",
									"});",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"let res = pm.response.json();",
									"console.log(res.translationID);",
									"pm.environment.set(\"currentTranslationID\", res.translationID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"userID\": \"{{currentBalanceUserID}}\", \"text\": \"парам пам пам\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{translationserviceHost}}{{translationservicePort}}/api/v1/translation/add",
							"host": [
								"{{translationserviceHost}}{{translationservicePort}}"
							],
							"path": [
								"api",
								"v1",
								"translation",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "TranslationStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"async function run() {",
									"\tawait new Promise(done => setTimeout(() => done(), 5000));",
									"}",
									"run();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"let res = pm.response.json();",
									"pm.test(\"Translation status must me SUCCESS\", function () {",
									"    pm.expect(res.translationStatus).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{translationserviceHost}}{{translationservicePort}}/api/v1/translation/status?translationID={{currentTranslationID}}",
							"host": [
								"{{translationserviceHost}}{{translationservicePort}}"
							],
							"path": [
								"api",
								"v1",
								"translation",
								"status"
							],
							"query": [
								{
									"key": "translationID",
									"value": "{{currentTranslationID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TranslationData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.sendRequest(pm.environment.get(\"balanceserviceHost\") + pm.environment.get(\"balanceServicePort\") + \"/api/v1/balance/canWriteOff?score=76&userID=\" + pm.environment.get(\"currentBalanceUserID\"), function (err, response) {",
									"    let res = response.json();",
									"    pm.test('It should be 76 scores on balance', function () {",
									"        pm.expect(response.status).to.eql(\"OK\");",
									"        pm.expect(res.result).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{translationserviceHost}}{{translationservicePort}}/api/v1/translation/data?translationID={{currentTranslationID}}",
							"host": [
								"{{translationserviceHost}}{{translationservicePort}}"
							],
							"path": [
								"api",
								"v1",
								"translation",
								"data"
							],
							"query": [
								{
									"key": "translationID",
									"value": "{{currentTranslationID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}